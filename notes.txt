1.in this app each page is a component that can be routed in the applicaiton


//start the applicaiton
1.to run the server ----> yarn serve-json
2.to run the client ----> yarn start

3.
useQuery('super-heroes',fetchSuperHeroes,{cacheTime:1000,staleTime:10000})
cacheTime: set the time for store the fetched data in the cache (default is 5 minutes)
staleTime: set the time that how long the data will be keeped as fresh (and after that if we open the component a re-fetch will be required) (default is 0)
//note: cacheTime triggers the isLoading but the stale time doesn't. It triggers the isFetching.

4.useQuery('super-heroes',fetchSuperHeroes,{refetchOnMount:true, refetchOnWindowFocus:true})
 refetchOnMount: the data will be refetch on mount if the data is stale. (default:true)
 -If it is false the query will not fetch on mount.
 -If it is 'always' the query fetch data whether the data is stale or not

refetchOnWindowFocus: the data will be fetch every time the window has focused. (default:true)

5.Polling
useQuery('super-heroes',fetchSuperHeroes,{refetchInterval:2000, refetchIntervalInBackground:true })
refetchInterval: the query will continuously refetch at this frequency in milliseconds.
refetchIntervalInBackground: If set to true, the query will continue to refetch while their tab/window is in the background. Defaults to false.

6.Fetch On Click
First enable the fetch on component mount. useQuery('super-heroes',fetchSuperHeroes,{enabled:false})
Then inside the onClick of a button use 'refetch' function that React query provides us to fetch the data with query.
Vola! That's it!

7. Data Transformation
To select a property from data use 'select' option.
useQuery('super-heroes',fetchSuperHeroes,
      { select: (data) => {
        const heroNames = data.data.map((hero) => hero.name);
        return heroNames;
       }})

After that inside the component we can use heroNames, cause it refers to the original data.

8.Query By inside
First we should be able to create a query key for each hero (['super-hero', heroId])
useQuery(['super-hero', heroId], fetchSuperHero);  in here we can define the query qey as an array and 
give the hero id to it as a second argument.
Secondly we need to chnage the fetch function in order to give it the heroId
const fetchSuperHero = (heroId) => {
 return axios.get(`http://localhost:4000/superHeroes/${heroId}`)
}

export const useSuperHeroData = (heroId) => {
    return useQuery(['super-hero', heroId], () => fetchSuperHero(heroId));
}

but we can do it simpler like that:

const fetchSuperHero = ({ queryKey }) => {
    const heroId = queryKey[1];
    console.log("query key:", queryKey);
    return axios.get(`http://localhost:4000/superHeroes/${heroId}`)
}
export const useSuperHeroData = (heroId) => {
    return useQuery(['super-hero', heroId], fetchSuperHero);
}

because react query provides queryKey to us adn we can destructure the id from it and use it easily.
And we can use the new hook (useSuperHeroData) inside our new page (RQSuperHero)
And don't forget to add the path to the app.js like this:
<Route path='/rq-super-heroes/:heroId' element={<RQSuperHeroPage />} >
</Route>